# Generated by Django 5.2.2 on 2025-07-22 07:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Arrival',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование заезда')),
                ('status', models.CharField(choices=[('active', 'Активный'), ('inactive', 'Неактивный')], default='active', max_length=10, verbose_name='Статус')),
                ('start_date', models.DateField(verbose_name='Дата начала заезда')),
                ('end_date', models.DateField(verbose_name='Дата окончания заезда')),
                ('application_start', models.DateTimeField(verbose_name='Дата и время начала подачи заявки')),
                ('application_end', models.DateTimeField(verbose_name='Дата и время окончания подачи заявки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('building_type', models.CharField(choices=[('1', 'Корпус №1'), ('2', 'Корпус №2'), ('3', 'Корпус №3'), ('4', 'Корпус №4'), ('5', 'Корпус №5'), ('lux1', 'Корпус люкс №1'), ('lux2', 'Корпус люкс №2'), ('lux3', 'Корпус люкс №3'), ('lux4', 'Корпус люкс №4')], max_length=10, verbose_name='Тип корпуса')),
                ('price_full', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Полная стоимость')),
                ('nds_full', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НДС (полная)')),
                ('nma_full', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НМА (полная)')),
                ('nsp_full', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НСП (полная)')),
                ('price_50', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='50% стоимость')),
                ('nds_50', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НДС (50%)')),
                ('nma_50', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НМА (50%)')),
                ('nsp_50', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НСП (50%)')),
                ('price_lgot_1', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Льготная стоимость №1')),
                ('nds_lgot_1', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НДС (льготная 1)')),
                ('nma_lgot_1', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НМА (льготная 1)')),
                ('nsp_lgot_1', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НСП (льготная 1)')),
                ('price_lgot_2', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Льготная стоимость №2')),
                ('nds_lgot_2', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НДС (льготная 2)')),
                ('nma_lgot_2', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НМА (льготная 2)')),
                ('nsp_lgot_2', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='НСП (льготная 2)')),
                ('lgot_active_set', models.PositiveSmallIntegerField(choices=[(1, 'Льготная №1'), (2, 'Льготная №2')], default=1, verbose_name='Активная льготная стоимость')),
            ],
        ),
        migrations.CreateModel(
            name='RoomLayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование номера')),
                ('capacity', models.PositiveIntegerField(verbose_name='Количество мест')),
                ('floor', models.PositiveIntegerField(verbose_name='Этаж')),
                ('building_type', models.CharField(choices=[('1', 'Корпус №1'), ('2', 'Корпус №2'), ('3', 'Корпус №3'), ('4', 'Корпус №4'), ('5', 'Корпус №5'), ('lux1', 'Корпус люкс №1'), ('lux2', 'Корпус люкс №2'), ('lux3', 'Корпус люкс №3'), ('lux4', 'Корпус люкс №4')], max_length=10, verbose_name='Тип корпуса')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=100, verbose_name='Отчество')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Должность')),
                ('quota', models.PositiveIntegerField(default=3, verbose_name='Количество квот')),
                ('role', models.CharField(choices=[('admin', 'Суперадмин'), ('moderator', 'Модератор'), ('user', 'Пользователь')], default='user', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания заявки')),
                ('guests', models.TextField(verbose_name='Список отдыхающих')),
                ('rooms', models.TextField(blank=True, null=True, verbose_name='Комнаты отдыхающих')),
                ('status', models.CharField(choices=[('new', 'Новая'), ('sent', 'Отправлена'), ('approved', 'Одобрена'), ('rejected', 'Отклонена'), ('cancelled', 'Отменена'), ('revision', 'На доработке')], default='new', max_length=20, verbose_name='Статус заявки')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('payment_status', models.CharField(choices=[('unpaid', 'Не оплачена'), ('pending', 'Ожидает оплаты'), ('check_pay', 'Проверьте оплату'), ('paid', 'Оплачена')], default='unpaid', max_length=20, verbose_name='Статус оплаты')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время отправки заявки')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.AUTH_USER_MODEL, verbose_name='Автор заявки')),
                ('arrival', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='core.arrival', verbose_name='Связанный заезд')),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='applications/docs/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.application')),
            ],
        ),
        migrations.AddField(
            model_name='arrival',
            name='rate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.rate', verbose_name='Тариф для заезда'),
        ),
        migrations.CreateModel(
            name='Relative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('patronymic', models.CharField(blank=True, max_length=100, verbose_name='Отчество')),
                ('birthdate', models.DateField(verbose_name='Дата рождения')),
                ('relation', models.CharField(max_length=50, verbose_name='Родственные отношения')),
                ('is_employee_child', models.BooleanField(default=False, verbose_name='Является ребенком сотрудника')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relative_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='relatives',
            field=models.ManyToManyField(blank=True, related_name='users', to='core.relative'),
        ),
        migrations.AddField(
            model_name='rate',
            name='room_layout',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rates_by_room', to='core.roomlayout'),
        ),
        migrations.CreateModel(
            name='RoomPlacement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_fio', models.CharField(max_length=200, verbose_name='ФИО гостя')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placements', to='core.application')),
                ('arrival', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_placements', to='core.arrival')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placements', to='core.roomlayout')),
            ],
        ),
    ]
